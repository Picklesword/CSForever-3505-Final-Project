//Name: Scott Young U0824833
//Class: CS3500
//10-3-2013

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SpreadsheetUtilities;
using System.Text.RegularExpressions;
using System.Xml;


namespace SS
{
    /// <summary>
    /// Class that allows the user to input values into specific cells and checks for dependencies and for
    /// circular dependencies.  This also allows you to get the contents of a cell the direct dependents etc.
    /// </summary>
    public class Spreadsheet : AbstractSpreadsheet
    {


        /// <summary>
        /// Constructor to initialize values for main variables
        /// </summary>
        public Spreadsheet()
            : base(s => true, s => s, "default")
        {

        } // End Spreadsheet

        /// <summary>
        /// Constructor that takes in two functions and a string for version control
        /// </summary>
        /// <param name="isValid"></param>
        /// <param name="normalize"></param>
        /// <param name="version"></param>
        public Spreadsheet(Func<string, bool> isValid, Func<string, string> normalize, string version)
            : base(isValid, normalize, version)
        {

        }

        /// <summary>
        /// constructor that takes a pathto a file, two functions and the string versoin
        /// </summary>
        /// <param name="PathToFile"></param>
        /// <param name="isValid"></param>
        /// <param name="normalize"></param>
        /// <param name="version"></param>
        public Spreadsheet(String PathToFile, Func<string, bool> isValid, Func<string, string> normalize, string version)
            : base(isValid, normalize, version)
        {
            try
            {
                loadDataFromFile(PathToFile);//attempts to load the data from the file based on the path given to the file
            }
            catch (Exception e)
            {
                throw new SpreadsheetReadWriteException(e.Message);
            }
        }

        /// <summary>
        /// Loads the saved version from the xml file
        /// </summary>
        /// <param name="filename"></param>
        private String loadSavedVersion(string filename)
        {
            filename = validateFileName(filename);
            String tempVersionFromFile = null;

            using (XmlReader reader = XmlReader.Create(filename))
            {
                if (reader.IsStartElement())
                {
                    switch (reader.Name)
                    {
                        case ("spreadsheet"):
                            break;
                        default:
                            throw new SpreadsheetReadWriteException("Error incorrect element tag, xml does not include spreadsheet");
                    }

                    if (reader.HasAttributes)
                        tempVersionFromFile = reader.GetAttribute(0);
                }
            }

            return tempVersionFromFile;
        }

        /// <summary>
        /// this method stores all of the cell data into an xml document to allow you to open it later
        /// </summary>
        /// <param name="filename"></param>
        private void saveCellData(string filename)
        {
            //creates a file with filename given with extention .xml
            filename = filename + ".xml";

            //creates a xmlfile using file name and then gets all of the data from the cellValues dictionary.
            using (XmlWriter writer = XmlWriter.Create(filename))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement("spreadsheet");
                writer.WriteAttributeString("version", Version);

                //stores all of the cell data into the xml file based on the cell name and the content.
                foreach (String st in cellValues.Keys)
                {
                    String cellConents = null;
                    Object tempCell = cellValues[st].CellContents;

                    if (tempCell.GetType().Equals(typeof(Formula)))//allows storage of the data from a formula adding the =
                        cellConents = "=" + tempCell.ToString();

                    else if (tempCell.GetType().Equals(typeof(double)))//allows storage of a double value
                        cellConents = tempCell.ToString();

                    else
                        cellConents = tempCell.ToString();//allows storage of strings

                    writer.WriteStartElement("cell"); //creates element cell
                    writer.WriteElementString("name", st);//stores an element under cell named name and gets the name 
                    writer.WriteElementString("contents", cellConents);//stores an element under contents and gets the content from above
                    writer.WriteEndElement();//ends the cell element
                }

                writer.WriteEndElement();//ends the spreadsheet element
                writer.WriteEndDocument();//ends the document
            }
        }

        /// <summary>
        /// loads data from an xml file for use and manipulation
        /// </summary>
        /// <param name="filename"></param>
        private void loadDataFromFile(string filename)
        {
            filename = validateFileName(filename);//validates the file name

            if (!(loadSavedVersion(filename).Equals(Version)))//throws and error if the version is not the same as the one we put in.
                throw new SpreadsheetReadWriteException("Error: Version of the saved spreadsheet does not match the version parameter");

            using (XmlReader reader = XmlReader.Create(filename))//creates an xml reader
            {
                String tempCellName = null;
                String tempCellContents = null;

                while (reader.Read())//wire the xmlreader is reading data it will continue to loop
                {
                    //sorts through each cell type and reads the data back into the program
                    if (reader.IsStartElement())
                    {
                        bool createCell = false;

                        switch (reader.Name)
                        {
                            case "spreadsheet":
                                break;
                            case "cell":
                                break;
                            case "name":
                                reader.Read();
                                tempCellName = reader.Value;
                                break;
                            case "contents":
                                reader.Read();
                                tempCellContents = reader.Value;
                                createCell = true;
                                break;
                            case "default":
                                throw new SpreadsheetReadWriteException("invalid XML tag");
                        }//end switch

                        if (createCell)
                        {
                            SetContentsOfCell(tempCellName, tempCellContents);
                            tempCellContents = null;
                            tempCellName = null;
                        }//end if
                    }//end if
                }//end loop
            }//end reader
        }//end method

        /// <summary>
        /// validates the filename to make sure it ends with .xml. if it doesn't it will append it to the end
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        private string validateFileName(string filename)
        {
            Regex check = new Regex(@"(.xml)$");

            if (!(check.IsMatch(filename)))
                filename = filename + ".xml";

            return filename;
        }

        /// <summary>
        /// returns all of the nonempty cells in our dictionary
        /// </summary>
        /// <returns></returns>
        public override IEnumerable<string> GetNamesOfAllNonemptyCells()
        {
            foreach (String n in cellValues.Keys)
                yield return n;
        }

        /// <summary>
        /// Gets the contents of a cell name and returns the value of the content.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public override object GetCellContents(string name)
        {
            Cell value;

            if (name == null)
                throw new InvalidNameException();
            ValidCellName(name); //makes sure the name is a valid name

            string tmpName = Normalize(name);//normalizes the data
            IsValid(tmpName);//makes sure the new normalized name is valid
            name = tmpName;//sets the name back to the tmpname

            bool found = cellValues.TryGetValue(name, out value);//checks to make sure  the data exists
            if (found)
            {
                object tmpObj = cellValues[name].CellContents;
                if (tmpObj is Formula)
                {
                    //need to append an = onto the value of the formula 

                    return "=" + value.CellContents;
                }
                else
                    return value.CellContents;
            }
            else
                return ""; // Ask about what needs to be returned if not found?
        }

        /// <summary>
        /// file gets the cell data from the cell name info
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public override object GetCellValue(string name)
        {
            if (name == null)
                throw new InvalidNameException();

            ValidCellName(name);

            string tmpName = Normalize(name);
            IsValid(tmpName);
            name = tmpName;
            //object cellContentVal = null;


            if (cellValues.ContainsKey(name))
            {
                return cellValues[name].CellValue;//returns the cellvalue
            }
            else
                return "";

        }

        /// <summary>
        /// method that will update all methods dependent on the string name and sets them equal to a formula error
        /// </summary>
        /// <param name="list"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private object UpdateDependeesOfString(ISet<string> list, string name)
        {

            object tmpError = null;
            //object cellContentVal = null;
            //string tmpStr = "";
            foreach (string n in list)
            {
                //int counter = 0;
                //cellContentVal = cellValues[n].CellContents;
                //tmpStr = cellContentVal.ToString();
                //List<string> tmpList = Regex.Split(tmpStr, "(\\()|(\\))|(-)|(\\+)|(\\*)|(/)").ToList(); //creates a substring array of the exp 
                //tmpList.RemoveAll(remove => remove.Equals("")); //removes all "" in the expression
                //counter = tmpList.Count();
                if (/*counter == 1 || */(cellValues[n].CellContents is string))
                    cellValues[n].CellValue = cellValues[name].CellContents;
                else //if (cellValues[n].CellContents is Formula)
                {
                    //this set of if statements checks to see if the tmpError is not null so that 
                    //all of the values dependent on the string become formula errors
                    if (tmpError != null)
                        cellValues[n].CellValue = tmpError;
                    else
                    {
                        Formula tmpForm = (Formula)cellValues[n].CellContents;
                        tmpError = tmpForm.Evaluate(lookup);
                        cellValues[n].CellValue = tmpError;
                    }
                }

            }
            return 0.0;
        }

        /// <summary>
        /// updates all of the cells dependent on the string name to make sure that evrything is updated 
        /// </summary>
        /// <param name="list"></param>
        private object UpdateCells(ISet<string> list, string name)
        {
            object cellContentVal = null;
            //loop checks all of the data dependent on name to update them.
            foreach (string n in list)
            {
                if (cellValues.ContainsKey(n))//makes sure the cellValues exists
                {

                    cellContentVal = cellValues[n].CellContents;
                    if (cellContentVal is string) //if the input name is a string it calls the UpdateDependeesOfString
                        return UpdateDependeesOfString(list, name);

                    if (cellContentVal is Formula)
                    {

                        Formula tempForm = (Formula)cellContentVal;



                        DictionaryOfLookUpVariables(dg.GetDependents(n), n);
                        //tempForm.GetVariables();

                        cellValues[n].CellValue = tempForm.Evaluate(lookup);

                        if (!(cellValues[n].CellValue is double))
                            return cellValues[n].CellValue;

                    }
                    else if (cellContentVal is double)
                        cellValues[n].CellValue = cellContentVal;

                }
                else
                    continue;
            }

            if (!cellValues.ContainsKey(name))
                return 0.0;
            else
                return cellValues[name].CellValue;
        }

        /// <summary>
        /// looks up the values in the cellValues to give to the evaluate method.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private double lookup(string name)
        {

            if (!cellValues.ContainsKey(name))
                throw new ArgumentException("cell not found");

            object cellValueContent = null;
            cellValueContent = cellValues[name].CellValue;

            if (cellValueContent is double)
                return (double)cellValues[name].CellValue;
            else
                throw new ArgumentException("Error: cell value not valid or empty");
        }

        /// <summary>
        /// method that recursively will call the updatecells method to make sure all of the data will be updated
        /// </summary>
        /// <param name="func"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void DictionaryOfLookUpVariables(IEnumerable<string> func, string name)
        {

            HashSet<string> SetList = new HashSet<string>();
            foreach (string n in func)
            {
                SetList.Add(n);
            }

            foreach (String st in func)
                UpdateCells(SetList, st);


            //return FormulaVariables;
        }

        /// <summary>
        /// creates a cell with name that contains number.  saves the values into a dictionary and a dependency graph
        ///  and returns values in a hashset.
        /// </summary>
        /// <param name="name">cell name</param>
        /// <param name="number">cell contents</param>
        /// <returns>a set</returns>
        protected override ISet<string> SetCellContents(string name, double number)
        {
            HashSet<string> returnSet = new HashSet<string>();

            ValidCellName(name);    //check to make sure it is a valid cell name

            if (cellValues.ContainsKey(name))
            {
                RemoveDependency(name);//if the name already exists it will remove any old dependencies
            }

            Cell cellValue = new Cell(number); 
            cellValues.Add(name, cellValue);
            //dg.AddDependency(name, number);

            IEnumerable<string> tempI = GetCellsToRecalculate(name);//recalculates the values and checks for circular dependency
            foreach (string n in tempI)
                returnSet.Add(n);

           
            UpdateCells(returnSet, name);//updates all of the cells
            Changed = true;
            return returnSet;
        }

        /// <summary>
        /// creates a cell with name that contains the text.  saves the values into a dictionary and a dependency graph
        ///  and returns values in a hashset.
        /// </summary>
        /// <param name="name">cell name</param>
        /// <param name="text">cell contents</param>
        /// <returns>a set</returns>
        protected override ISet<string> SetCellContents(string name, string text)
        {
            HashSet<string> returnSet = new HashSet<string>();

            //if (text == null)
            //throw new ArgumentNullException("null argument detected");

            ValidCellName(name);    //check to make sure it is a valid cell name

            if (cellValues.ContainsKey(name))
            {
                RemoveDependency(name); //removes dependencies if name already exists
            }

            Cell cellValue = new Cell(text);
            cellValues.Add(name, cellValue);



            IEnumerable<string> tempI = GetCellsToRecalculate(name);//recalculates the values and checks for circular dependency
            foreach (string n in tempI)
                returnSet.Add(n);

            //foreach (string n in returnSet)
            //{
            //    if (/*cellValues[n].CellContents is double||*/  cellValues[n].CellContents is Formula)
            //        throw new ArithmeticException();
            //    else
            //        continue;
            //}

            
            UpdateCells(returnSet, name);//update the cells
            Changed = true;
            return returnSet;
        }//end method


        /// <summary>
        /// SetCellContent takes a string and a formula to add to the dependency graph and to the dictionary and returns a ISet(hashset)
        /// also validates that there are no circular dependencies in the formulas
        /// </summary>
        /// <param name="name">cell name</param>
        /// <param name="formula">cell contents</param>
        /// <returns></returns>
        protected override ISet<string> SetCellContents(string name, Formula formula)
        {

            List<string> variables = new List<string>();
            Cell cellValue;
            HashSet<string> returnSet = new HashSet<string>();//hashset for return values
            object originalCellContent = null; //stores the original cell value

            //if (formula == null)
            //throw new ArgumentNullException("null argument detected");

            ValidCellName(name);    //check to make sure it is a valid cell name

            if (cellValues.ContainsKey(name))
            {
                originalCellContent = cellValues[name].CellContents;
                //cellValues.TryGetValue(name, out originalCellContent);
                RemoveDependency(name);
                //if we have to use the recalculate create and bool to say if remove was performed and then after values are added to dg and cellValues call the
                //recalculate method.
            }


            cellValue = new Cell(formula);//saves the content of the cell to store in the dictionary
            cellValues.Add(name, cellValue);

            //variables gets a list of all of the variables in the formula and creates a list 
            //to add to the dependency graph
            variables = formula.GetVariables().ToList();

            //adds the values associate to name to the dependency graph
            foreach (string n in variables)
            {
                dg.AddDependency(name, n);
            }



            try
            {
                //saves the direct and indirect values into tempI and then put them into my returnSet
                //also checks for circular dependency and recalculates the values in the cells associate with the name
                IEnumerable<string> tempI = GetCellsToRecalculate(name);//recalculates the values and checks for circular dependency
                foreach (string n in tempI)
                    returnSet.Add(n);
            }
            catch (CircularException c)
            {

                //method comes here if a circularexeption is found when calling the GetCellsToRecalculate method
                //originalCellContent is saved earlier in the code to allow us to go back to the original values to get
                //rid of the circular dependency
                if (originalCellContent != null)
                {
                    if (originalCellContent is Formula)
                    {
                        Formula originalFormula = new Formula(originalCellContent.ToString());

                        SetCellContents(name, originalFormula);
                    }
                    else if (originalCellContent is String)
                    {
                        SetCellContents(name, originalCellContent.ToString());
                    }
                    else if (originalCellContent is double)
                    {
                        SetCellContents(name, Convert.ToDouble(originalCellContent));
                    }

                }
                else
                    SetCellContents(name, "");

                throw c;
            }

            
            UpdateCells(returnSet, name);

            Changed = true;
            return returnSet;


        }//end method

        /// <summary>
        /// This method gets all of the direct dependents of the name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        protected override IEnumerable<string> GetDirectDependents(string name)
        {
            //if (name == null)
            //throw new ArgumentNullException();

            ValidCellName(name);

            IEnumerable<string> getDependents = dg.GetDependees(name);

            foreach (string n in getDependents)
                yield return n;
        }

        /// <summary>
        /// method to remove dependencies from the given name to allow our new input 
        /// to fill in the cell with no old values leaving a footprint behind.
        /// </summary>
        /// <param name="name"></param>
        private void RemoveDependency(string name)
        {
            bool hasDependents = dg.HasDependents(name);
            List<string> dgDependents = dg.GetDependents(name).ToList();


            if (hasDependents)
            {
                foreach (string n in dgDependents)
                {
                    dg.RemoveDependency(name, n);
                }
            }
            cellValues.Remove(name);//delete the old  cell to allow user to put new content into cell

        }

        /// <summary>
        /// checks to make sure that the cell name is valid using regex 
        /// must start with a letter or _ and end with any number of numbers, letters or _ 
        /// </summary>
        /// <param name="testCellName"></param>
        /// <returns>bool</returns>
        private bool ValidCellName(String testCellName)
        {
            if (testCellName == null)
                throw new InvalidNameException();

            bool valid = false;
            Regex check = new Regex(@"(^[a-zA-Z]+)([0-9]+)$");

            if (check.IsMatch(testCellName))
                valid = true;
            else
                throw new InvalidNameException();

            return valid;
        }//end method



        /// <summary>
        /// checks to see if anything has changed
        /// </summary>
        public override bool Changed
        {
            get
            {
                return changed;
            }
            protected set
            {
                changed = value;
            }
        }


        /// <summary>
        /// gets the saved version from the file
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        public override string GetSavedVersion(string filename)
        {
            try
            {
                return loadSavedVersion(filename);
            }
            catch (Exception e)
            {
                throw new SpreadsheetReadWriteException(e.Message);
            }
        }

        /// <summary>
        /// calls the save cell data method 
        /// </summary>
        /// <param name="filename"></param>
        public override void Save(string filename)
        {
            try
            {
                saveCellData(filename);
            }
            catch (Exception e)
            {
                throw new SpreadsheetReadWriteException(e.Message);
            }
        }



        /// <summary>
        /// Method checks to see if input is a string, double or formula and calls the method for one of those types
        /// </summary>
        /// <param name="name"></param>
        /// <param name="content"></param>
        /// <returns></returns>
        public override ISet<string> SetContentsOfCell(string name, string content)
        {
            
            if (content == null)
                throw new ArgumentNullException();
            else if (content == "")
                return new HashSet<string>();

            ValidCellName(name);

            string tmpName = Normalize(name);
            IsValid(tmpName);
            name = tmpName;

            if (tryParseDouble(content))
            {
                double dblInput = Convert.ToDouble(content);
                return SetCellContents(name, dblInput);
            }
            else if (content[0].Equals('='))
            {
                String tmpContent = "";
                tmpContent = content.Remove(0, 1);
                Formula fmlInput = new Formula(tmpContent, Normalize, IsValid);
                return SetCellContents(name, fmlInput);
            }
            else
                return SetCellContents(name, content);


        }//end method


        /// <summary>
        /// Parses the double value from the string to all the methods to use it in different ways
        /// </summary>
        /// <param name="input"></param>
        /// <returns>boolParse</returns>
        private bool tryParseDouble(string input)
        {
            double num;
            bool boolParse = double.TryParse(input, out num);

            return boolParse;
        }

    }//end class




    /// <summary>
    /// Class to add Cell contents into the dictionary CellValues
    /// </summary>
    public class Cell
    {

        private Object stringContents;
        private Object objValue;
        //private bool isFormula;

        //allows methods to get the data from cellContents.
        public Object CellContents
        {
            get { return stringContents; }
            //set;
        }

        /// <summary>
        /// sets the content of the cellValue
        /// </summary>
        public Object CellValue
        {
            get { return objValue; }
            set { objValue = value; }
        }

        public Cell(Object contents)
        {

            stringContents = contents;

        }




    }
}
