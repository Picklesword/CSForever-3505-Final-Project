// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethodAddTwoValues - Use 'RecordedMethodAddTwoValuesParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethodAddTwoValues()
        {
            #region Variable Declarations
            WinEdit uICellContentTBEdit = this.UISpreadSheet1Window.UICellContentTBWindow.UICellContentTBEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadSheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadSheet1Window = ApplicationUnderTest.Launch(this.RecordedMethodAddTwoValuesParams.UISpreadSheet1WindowExePath, this.RecordedMethodAddTwoValuesParams.UISpreadSheet1WindowAlternateExePath);

            // Type '5' in 'CellContentTB' text box
            uICellContentTBEdit.Text = this.RecordedMethodAddTwoValuesParams.UICellContentTBEditText;

            // Type '{Enter}' in 'CellContentTB' text box
            Keyboard.SendKeys(uICellContentTBEdit, this.RecordedMethodAddTwoValuesParams.UICellContentTBEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 39));

            // Type '10' in 'CellContentTB' text box
            uICellContentTBEdit.Text = this.RecordedMethodAddTwoValuesParams.UICellContentTBEditText1;

            // Type '{Enter}' in 'CellContentTB' text box
            Keyboard.SendKeys(uICellContentTBEdit, this.RecordedMethodAddTwoValuesParams.UICellContentTBEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 36));

            // Type '=A1+B1' in 'CellContentTB' text box
            uICellContentTBEdit.Text = this.RecordedMethodAddTwoValuesParams.UICellContentTBEditText2;
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellValueTBEdit = this.UISpreadSheet1Window.UICellValueTBWindow.UICellValueTBEdit;
            #endregion

            // Verify that the 'ControlType' property of 'CellValueTB' text box equals 'Edit'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellValueTBEditControlType, uICellValueTBEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethodFindReplace - Use 'RecordedMethodFindReplaceParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethodFindReplace()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadSheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentTBEdit = this.UISpreadSheet1Window.UICellContentTBWindow.UICellContentTBEdit;
            WinMenuItem uIFindMenuItem = this.UISpreadSheet1Window.UIMenuStrip1MenuBar.UIFindMenuItem;
            WinEdit uITextBoxFindEdit = this.UIFindWindow.UITextBoxFindWindow.UITextBoxFindEdit;
            WinWindow uISpreadSheet1Window = this.UISpreadSheet1Window;
            WinButton uIFindNextButton = this.UIFindWindow.UIFindNextWindow.UIFindNextButton;
            WinButton uIFindButton = this.UIFindWindow.UIFindWindow1.UIFindButton;
            WinCheckBox uIReplaceCheckBox = this.UIFindWindow.UIReplaceWindow.UIReplaceCheckBox;
            WinEdit uITextBoxReplaceEdit = this.UIFindWindow.UITextBoxReplaceWindow.UITextBoxReplaceEdit;
            WinButton uIReplaceButton = this.UIFindWindow.UIReplaceWindow1.UIReplaceButton;
            WinButton uICloseButton = this.UIFindWindow.UIFindTitleBar.UICloseButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 64));

            // Type '5' in 'CellContentTB' text box
            uICellContentTBEdit.Text = this.RecordedMethodFindReplaceParams.UICellContentTBEditText;

            // Type '{Enter}' in 'CellContentTB' text box
            Keyboard.SendKeys(uICellContentTBEdit, this.RecordedMethodFindReplaceParams.UICellContentTBEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 65));

            // Type '5' in 'CellContentTB' text box
            uICellContentTBEdit.Text = this.RecordedMethodFindReplaceParams.UICellContentTBEditText1;

            // Type '{Enter}' in 'CellContentTB' text box
            Keyboard.SendKeys(uICellContentTBEdit, this.RecordedMethodFindReplaceParams.UICellContentTBEditSendKeys1, ModifierKeys.None);

            // Click 'Find' menu item
            Mouse.Click(uIFindMenuItem, new Point(31, 10));

            // Type '5' in 'textBoxFind' text box
            uITextBoxFindEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxFindEditText;

            // Type '{Enter}' in 'textBoxFind' text box
            Keyboard.SendKeys(uITextBoxFindEdit, this.RecordedMethodFindReplaceParams.UITextBoxFindEditSendKeys, ModifierKeys.None);

            // Maximize window 'SpreadSheet1'
            uISpreadSheet1Window.Maximized = this.RecordedMethodFindReplaceParams.UISpreadSheet1WindowMaximized;

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(42, 12));

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(42, 12));

            // Double-Click 'Find Next' button
            Mouse.DoubleClick(uIFindNextButton, new Point(42, 12));

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(42, 12));

            // Type '10' in 'textBoxFind' text box
            uITextBoxFindEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxFindEditText1;

            // Click 'Find' button
            Mouse.Click(uIFindButton, new Point(37, 15));

            // Double-Click 'textBoxFind' text box
            Mouse.DoubleClick(uITextBoxFindEdit, new Point(151, 11));

            // Select 'Replace' check box
            uIReplaceCheckBox.Checked = this.RecordedMethodFindReplaceParams.UIReplaceCheckBoxChecked;

            // Type '6' in 'textBoxReplace' text box
            uITextBoxReplaceEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxReplaceEditText;

            // Click 'Replace' button
            Mouse.Click(uIReplaceButton, new Point(66, 16));

            // Type '6' in 'textBoxFind' text box
            uITextBoxFindEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxFindEditText2;

            // Click 'Find' button
            Mouse.Click(uIFindButton, new Point(13, 14));

            // Click 'textBoxFind' text box
            Mouse.Click(uITextBoxFindEdit, new Point(155, 12));

            // Type '{Enter}' in 'textBoxFind' text box
            Keyboard.SendKeys(uITextBoxFindEdit, this.RecordedMethodFindReplaceParams.UITextBoxFindEditSendKeys1, ModifierKeys.None);

            // Click 'textBoxReplace' text box
            Mouse.Click(uITextBoxReplaceEdit, new Point(137, 11));

            // Type '{Enter}' in 'textBoxReplace' text box
            Keyboard.SendKeys(uITextBoxReplaceEdit, this.RecordedMethodFindReplaceParams.UITextBoxReplaceEditSendKeys, ModifierKeys.None);

            // Click 'Find' button
            Mouse.Click(uIFindButton, new Point(16, 7));

            // Clear 'Replace' check box
            uIReplaceCheckBox.Checked = this.RecordedMethodFindReplaceParams.UIReplaceCheckBoxChecked1;

            // Type '5' in 'textBoxFind' text box
            uITextBoxFindEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxFindEditText3;

            // Click 'Find' button
            Mouse.Click(uIFindButton, new Point(67, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 7));

            // Type 'Control + f' in 'CellContentTB' text box
            Keyboard.SendKeys(uICellContentTBEdit, this.RecordedMethodFindReplaceParams.UICellContentTBEditSendKeys2, ModifierKeys.Control);

            // Type '5' in 'textBoxFind' text box
            uITextBoxFindEdit.Text = this.RecordedMethodFindReplaceParams.UITextBoxFindEditText4;

            // Type '{Enter}' in 'textBoxFind' text box
            Keyboard.SendKeys(uITextBoxFindEdit, this.RecordedMethodFindReplaceParams.UITextBoxFindEditSendKeys2, ModifierKeys.None);

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(59, 12));

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(59, 12));

            // Click 'Find Next' button
            Mouse.Click(uIFindNextButton, new Point(59, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 12));
        }
        
        #region Properties
        public virtual RecordedMethodAddTwoValuesParams RecordedMethodAddTwoValuesParams
        {
            get
            {
                if ((this.mRecordedMethodAddTwoValuesParams == null))
                {
                    this.mRecordedMethodAddTwoValuesParams = new RecordedMethodAddTwoValuesParams();
                }
                return this.mRecordedMethodAddTwoValuesParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethodFindReplaceParams RecordedMethodFindReplaceParams
        {
            get
            {
                if ((this.mRecordedMethodFindReplaceParams == null))
                {
                    this.mRecordedMethodFindReplaceParams = new RecordedMethodFindReplaceParams();
                }
                return this.mRecordedMethodFindReplaceParams;
            }
        }
        
        public UISpreadSheet1Window UISpreadSheet1Window
        {
            get
            {
                if ((this.mUISpreadSheet1Window == null))
                {
                    this.mUISpreadSheet1Window = new UISpreadSheet1Window();
                }
                return this.mUISpreadSheet1Window;
            }
        }
        
        public UIFindWindow UIFindWindow
        {
            get
            {
                if ((this.mUIFindWindow == null))
                {
                    this.mUIFindWindow = new UIFindWindow();
                }
                return this.mUIFindWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethodAddTwoValuesParams mRecordedMethodAddTwoValuesParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethodFindReplaceParams mRecordedMethodFindReplaceParams;
        
        private UISpreadSheet1Window mUISpreadSheet1Window;
        
        private UIFindWindow mUIFindWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethodAddTwoValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethodAddTwoValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadSheet1WindowExePath = "C:\\Users\\Scott\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadSheet1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditText1 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditText2 = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'CellValueTB' text box equals 'Edit'
        /// </summary>
        public string UICellValueTBEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethodFindReplace'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethodFindReplaceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Maximize window 'SpreadSheet1'
        /// </summary>
        public bool UISpreadSheet1WindowMaximized = true;
        
        /// <summary>
        /// Type '10' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditText1 = "10";
        
        /// <summary>
        /// Select 'Replace' check box
        /// </summary>
        public bool UIReplaceCheckBoxChecked = true;
        
        /// <summary>
        /// Type '6' in 'textBoxReplace' text box
        /// </summary>
        public string UITextBoxReplaceEditText = "6";
        
        /// <summary>
        /// Type '6' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditText2 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxReplace' text box
        /// </summary>
        public string UITextBoxReplaceEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Clear 'Replace' check box
        /// </summary>
        public bool UIReplaceCheckBoxChecked1 = false;
        
        /// <summary>
        /// Type '5' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditText3 = "5";
        
        /// <summary>
        /// Type 'Control + f' in 'CellContentTB' text box
        /// </summary>
        public string UICellContentTBEditSendKeys2 = "f";
        
        /// <summary>
        /// Type '5' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxFind' text box
        /// </summary>
        public string UITextBoxFindEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadSheet1Window : WinWindow
    {
        
        public UISpreadSheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SpreadSheet1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SpreadSheet1");
            #endregion
        }
        
        #region Properties
        public UICellContentTBWindow UICellContentTBWindow
        {
            get
            {
                if ((this.mUICellContentTBWindow == null))
                {
                    this.mUICellContentTBWindow = new UICellContentTBWindow(this);
                }
                return this.mUICellContentTBWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellValueTBWindow UICellValueTBWindow
        {
            get
            {
                if ((this.mUICellValueTBWindow == null))
                {
                    this.mUICellValueTBWindow = new UICellValueTBWindow(this);
                }
                return this.mUICellValueTBWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentTBWindow mUICellContentTBWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellValueTBWindow mUICellValueTBWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellContentTBWindow : WinWindow
    {
        
        public UICellContentTBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentTB";
            this.WindowTitles.Add("SpreadSheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentTBEdit
        {
            get
            {
                if ((this.mUICellContentTBEdit == null))
                {
                    this.mUICellContentTBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentTBEdit.WindowTitles.Add("SpreadSheet1");
                    #endregion
                }
                return this.mUICellContentTBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentTBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("SpreadSheet1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("SpreadSheet1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellValueTBWindow : WinWindow
    {
        
        public UICellValueTBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueTB";
            this.WindowTitles.Add("SpreadSheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTBEdit
        {
            get
            {
                if ((this.mUICellValueTBEdit == null))
                {
                    this.mUICellValueTBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTBEdit.WindowTitles.Add("SpreadSheet1");
                    #endregion
                }
                return this.mUICellValueTBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("SpreadSheet1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFindMenuItem
        {
            get
            {
                if ((this.mUIFindMenuItem == null))
                {
                    this.mUIFindMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFindMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Find";
                    this.mUIFindMenuItem.WindowTitles.Add("SpreadSheet1");
                    #endregion
                }
                return this.mUIFindMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFindMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFindWindow : WinWindow
    {
        
        public UIFindWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Find";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public UITextBoxFindWindow UITextBoxFindWindow
        {
            get
            {
                if ((this.mUITextBoxFindWindow == null))
                {
                    this.mUITextBoxFindWindow = new UITextBoxFindWindow(this);
                }
                return this.mUITextBoxFindWindow;
            }
        }
        
        public UIFindNextWindow UIFindNextWindow
        {
            get
            {
                if ((this.mUIFindNextWindow == null))
                {
                    this.mUIFindNextWindow = new UIFindNextWindow(this);
                }
                return this.mUIFindNextWindow;
            }
        }
        
        public UIFindWindow1 UIFindWindow1
        {
            get
            {
                if ((this.mUIFindWindow1 == null))
                {
                    this.mUIFindWindow1 = new UIFindWindow1(this);
                }
                return this.mUIFindWindow1;
            }
        }
        
        public UIReplaceWindow UIReplaceWindow
        {
            get
            {
                if ((this.mUIReplaceWindow == null))
                {
                    this.mUIReplaceWindow = new UIReplaceWindow(this);
                }
                return this.mUIReplaceWindow;
            }
        }
        
        public UITextBoxReplaceWindow UITextBoxReplaceWindow
        {
            get
            {
                if ((this.mUITextBoxReplaceWindow == null))
                {
                    this.mUITextBoxReplaceWindow = new UITextBoxReplaceWindow(this);
                }
                return this.mUITextBoxReplaceWindow;
            }
        }
        
        public UIReplaceWindow1 UIReplaceWindow1
        {
            get
            {
                if ((this.mUIReplaceWindow1 == null))
                {
                    this.mUIReplaceWindow1 = new UIReplaceWindow1(this);
                }
                return this.mUIReplaceWindow1;
            }
        }
        
        public UIFindTitleBar UIFindTitleBar
        {
            get
            {
                if ((this.mUIFindTitleBar == null))
                {
                    this.mUIFindTitleBar = new UIFindTitleBar(this);
                }
                return this.mUIFindTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITextBoxFindWindow mUITextBoxFindWindow;
        
        private UIFindNextWindow mUIFindNextWindow;
        
        private UIFindWindow1 mUIFindWindow1;
        
        private UIReplaceWindow mUIReplaceWindow;
        
        private UITextBoxReplaceWindow mUITextBoxReplaceWindow;
        
        private UIReplaceWindow1 mUIReplaceWindow1;
        
        private UIFindTitleBar mUIFindTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITextBoxFindWindow : WinWindow
    {
        
        public UITextBoxFindWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxFind";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxFindEdit
        {
            get
            {
                if ((this.mUITextBoxFindEdit == null))
                {
                    this.mUITextBoxFindEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxFindEdit.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUITextBoxFindEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxFindEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFindNextWindow : WinWindow
    {
        
        public UIFindNextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ButtonFindNext";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinButton UIFindNextButton
        {
            get
            {
                if ((this.mUIFindNextButton == null))
                {
                    this.mUIFindNextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFindNextButton.SearchProperties[WinButton.PropertyNames.Name] = "Find Next";
                    this.mUIFindNextButton.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUIFindNextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFindNextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFindWindow1 : WinWindow
    {
        
        public UIFindWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonFind";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinButton UIFindButton
        {
            get
            {
                if ((this.mUIFindButton == null))
                {
                    this.mUIFindButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFindButton.SearchProperties[WinButton.PropertyNames.Name] = "Find";
                    this.mUIFindButton.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUIFindButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFindButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIReplaceWindow : WinWindow
    {
        
        public UIReplaceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Replace";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIReplaceCheckBox
        {
            get
            {
                if ((this.mUIReplaceCheckBox == null))
                {
                    this.mUIReplaceCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIReplaceCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Replace";
                    this.mUIReplaceCheckBox.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUIReplaceCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIReplaceCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITextBoxReplaceWindow : WinWindow
    {
        
        public UITextBoxReplaceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxReplace";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxReplaceEdit
        {
            get
            {
                if ((this.mUITextBoxReplaceEdit == null))
                {
                    this.mUITextBoxReplaceEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxReplaceEdit.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUITextBoxReplaceEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxReplaceEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIReplaceWindow1 : WinWindow
    {
        
        public UIReplaceWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonReplace";
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinButton UIReplaceButton
        {
            get
            {
                if ((this.mUIReplaceButton == null))
                {
                    this.mUIReplaceButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIReplaceButton.SearchProperties[WinButton.PropertyNames.Name] = "Replace";
                    this.mUIReplaceButton.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUIReplaceButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIReplaceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFindTitleBar : WinTitleBar
    {
        
        public UIFindTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Find");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Find");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
