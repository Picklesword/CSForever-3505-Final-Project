// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// testing that app opens correctly
        /// </summary>
        public void OpenSingleApp()
        {

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.OpenSingleAppParams.ExePath, this.OpenSingleAppParams.AlternateExePath);
        }
        
        /// <summary>
        /// Makes sure the right name cell value and Cell_Contents are present
        /// </summary>
        public void Correct_Initial_content()
        {
            #region Variable Declarations
            WinEdit uICell_NameEdit = this.UISpreadsheetAppWindow.UIA1Window.UICell_NameEdit;
            WinEdit uICell_ValueEdit = this.UISpreadsheetAppWindow.UICell_ValueWindow.UICell_ValueEdit;
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
            Assert.AreEqual(this.Correct_Initial_contentExpectedValues.UICell_NameEditText, uICell_NameEdit.Text, "Did not start with A1 as value ");

            // Verify that the 'Text' property of 'Cell_Value' text box equals ''
            Assert.AreEqual(this.Correct_Initial_contentExpectedValues.UICell_ValueEditText, uICell_ValueEdit.Text, "Value Present at startup ");

            // Verify that the 'Text' property of 'Cell_Contents' text box equals ''
            Assert.AreEqual(this.Correct_Initial_contentExpectedValues.UICell_ContentsEditText, uICell_ContentsEdit.Text, "Contents not empty on startup");
        }
        
        /// <summary>
        /// Tests typing into a text box
        /// </summary>
        public void TypingIntoTextBox()
        {
            #region Variable Declarations
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            #endregion

            // Type 'hello' in 'Cell_Contents' text box
            uICell_ContentsEdit.Text = this.TypingIntoTextBoxParams.UICell_ContentsEditText;

            // Type '{Enter}' in 'Cell_Contents' text box
            Keyboard.SendKeys(uICell_ContentsEdit, this.TypingIntoTextBoxParams.UICell_ContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Test that everything updates correctly by placing a string that says hello
        /// </summary>
        public void Correct_Alteration1()
        {
            #region Variable Declarations
            WinEdit uICell_NameEdit = this.UISpreadsheetAppWindow.UIA1Window.UICell_NameEdit;
            WinEdit uICell_ValueEdit = this.UISpreadsheetAppWindow.UICell_ValueWindow.UICell_ValueEdit;
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
            Assert.AreEqual(this.Correct_Alteration1ExpectedValues.UICell_NameEditText, uICell_NameEdit.Text, "changed when should not have ");

            // Verify that the 'Text' property of 'Cell_Value' text box equals 'hello'
            Assert.AreEqual(this.Correct_Alteration1ExpectedValues.UICell_ValueEditText, uICell_ValueEdit.Text, "correct value is not being displayed");

            // Verify that the 'Text' property of 'Cell_Contents' text box equals 'hello'
            Assert.AreEqual(this.Correct_Alteration1ExpectedValues.UICell_ContentsEditText, uICell_ContentsEdit.Text, "correct content is not being displayed");
        }
        
        /// <summary>
        /// shows that clicking on help generates the message box
        /// </summary>
        public void Help_Appears()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(34, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 12));
        }
        
        /// <summary>
        /// Tests that a second app was correctly generated
        /// </summary>
        public void Second_App()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'file' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(44, 5));
        }
        
        /// <summary>
        /// Tests that second app initialized correctly
        /// </summary>
        public void Second_App_Itialized()
        {
            #region Variable Declarations
            WinEdit uICell_NameEdit = this.UISpreadsheetAppWindow1.UIA1Window.UICell_NameEdit;
            WinEdit uICell_ValueEdit = this.UISpreadsheetAppWindow1.UICell_ValueWindow.UICell_ValueEdit;
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow1.UICell_ContentsWindow.UICell_ContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
            Assert.AreEqual(this.Second_App_ItializedExpectedValues.UICell_NameEditText, uICell_NameEdit.Text, "second application has wrong cell name at start ");

            // Verify that the 'Text' property of 'Cell_Value' text box equals ''
            Assert.AreEqual(this.Second_App_ItializedExpectedValues.UICell_ValueEditText, uICell_ValueEdit.Text, "Second app has wrong value at start ");

            // Verify that the 'Text' property of 'Cell_Contents' text box equals ''
            Assert.AreEqual(this.Second_App_ItializedExpectedValues.UICell_ContentsEditText, uICell_ContentsEdit.Text, "Second App had wrong Cell contents at start");
        }
        
        /// <summary>
        /// Tests that the second app closed
        /// </summary>
        public void Second_App_Closed()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetAppWindow1.UISpreadsheetAppTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(10, 7));
        }
        
        /// <summary>
        /// Tests the opening and closing of several apps
        /// </summary>
        public void Several_App_Open_Close()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetAppWindow1.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem2 = this.UISpreadsheetAppWindow2.UIMenuBarMenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetAppWindow3.UISpreadsheetAppTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetAppWindow2.UISpreadsheetAppTitleBar.UICloseButton;
            WinButton uICloseButton2 = this.UISpreadsheetAppWindow1.UISpreadsheetAppTitleBar.UICloseButton;
            #endregion

            // Click 'file' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(31, 6));

            // Click 'file' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(27, 6));

            // Click 'file' -> 'New' menu item
            Mouse.Click(uINewMenuItem2, new Point(35, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(26, 4));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(14, 9));
        }
        
        /// <summary>
        /// Overwrite_Attempt_Cancel
        /// </summary>
        public void Overwrite_Attempt_Cancel()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIPossibleDatalossWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'file' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(47, 9));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(35, 11));
        }
        
        /// <summary>
        /// tries to open a new file and decides to save first
        /// </summary>
        public void Overwrite_Attempt_Ok()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uIYesButton = this.UIPossibleDatalossWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'file' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(58, 13));

            // Select 'hello_record' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Overwrite_Attempt_OkParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(36, 13));
        }
        
        /// <summary>
        /// test for openning the demo xml file
        /// </summary>
        public void Loading_the_demo_xml()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDocumentsTreeItem = this.UIOpenWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIThisPCTreeItem.UIDocumentsTreeItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIVisualStudio2013ListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenWindow.UIItemWindow1.UIProjectsListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenWindow.UIItemWindow2.UIPS6SkeletonListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenWindow.UIItemWindow3.UIDemosprdListItem.UINameEdit;
            #endregion

            // Click 'file' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(77, 10));

            // Expand 'Desktop' -> 'This PC' -> 'Documents' tree item
            uIDocumentsTreeItem.Expanded = this.Loading_the_demo_xmlParams.UIDocumentsTreeItemExpanded;

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(65, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(60, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(49, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(65, 12));
        }
        
        /// <summary>
        /// tests_demoxml is opened
        /// </summary>
        public void Open_Demo_Xml()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIDemosprdListItem.UINameEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetAppWindow = ApplicationUnderTest.Launch(this.Open_Demo_XmlParams.UISpreadsheetAppWindowExePath, this.Open_Demo_XmlParams.UISpreadsheetAppWindowAlternateExePath);

            // Click 'file' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(61, 17));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(60, 13));
        }
        
        /// <summary>
        /// shows not pressing enter means no content is added
        /// </summary>
        public void Must_press_enter()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetAppWindow.UIMenuBarMenuBar.UIFileMenuItem;
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            WinClient uIGUICellsClient = this.UISpreadsheetAppWindow.UIItemWindow.UIGUICellsClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetAppWindow = ApplicationUnderTest.Launch(this.Must_press_enterParams.UISpreadsheetAppWindowExePath, this.Must_press_enterParams.UISpreadsheetAppWindowAlternateExePath);

            // Click 'file' menu item
            Mouse.Click(uIFileMenuItem, new Point(10, 6));

            // Type '=b1+1' in 'Cell_Contents' text box
            uICell_ContentsEdit.Text = this.Must_press_enterParams.UICell_ContentsEditText;

            // Click 'GUICells' client
            Mouse.Click(uIGUICellsClient, new Point(141, 44));

            // Type '1' in 'Cell_Contents' text box
            uICell_ContentsEdit.Text = this.Must_press_enterParams.UICell_ContentsEditText1;

            // Type '{Enter}' in 'Cell_Contents' text box
            Keyboard.SendKeys(uICell_ContentsEdit, this.Must_press_enterParams.UICell_ContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// show that dependencies work
        /// </summary>
        public void Dependencies_work()
        {
            #region Variable Declarations
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            WinClient uIGUICellsClient = this.UISpreadsheetAppWindow.UIItemWindow.UIGUICellsClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetAppWindow = ApplicationUnderTest.Launch(this.Dependencies_workParams.UISpreadsheetAppWindowExePath, this.Dependencies_workParams.UISpreadsheetAppWindowAlternateExePath);

            // Type '=B1+1' in 'Cell_Contents' text box
            uICell_ContentsEdit.Text = this.Dependencies_workParams.UICell_ContentsEditText;

            // Click 'GUICells' client
            Mouse.Click(uIGUICellsClient, new Point(165, 38));

            // Type '1' in 'Cell_Contents' text box
            uICell_ContentsEdit.Text = this.Dependencies_workParams.UICell_ContentsEditText1;

            // Type '{Enter}' in 'Cell_Contents' text box
            Keyboard.SendKeys(uICell_ContentsEdit, this.Dependencies_workParams.UICell_ContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// shows formula still in contents
        /// </summary>
        public void Reselect_Cell_Formula()
        {
            #region Variable Declarations
            WinClient uIGUICellsClient = this.UISpreadsheetAppWindow.UIItemWindow.UIGUICellsClient;
            #endregion

            // Click 'GUICells' client
            Mouse.Click(uIGUICellsClient, new Point(59, 44));
        }
        
        /// <summary>
        /// Equation_Persevered - Use 'Equation_PerseveredExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Equation_Persevered()
        {
            #region Variable Declarations
            WinEdit uICell_ContentsEdit = this.UISpreadsheetAppWindow.UICell_ContentsWindow.UICell_ContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Contents' text box equals '=B1+1'
            Assert.AreEqual(this.Equation_PerseveredExpectedValues.UICell_ContentsEditText, uICell_ContentsEdit.Text, "equation was not perserved ");
        }
        
        /// <summary>
        /// Test_showed_an_Error_in_regex - Use 'Test_showed_an_Error_in_regexParams' to pass parameters into this method.
        /// </summary>
        public void Test_showed_an_Error_in_regex()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinEdit uIGo_to_CellEdit = this.UISpreadsheetAppWindow.UIGo_to_CellWindow.UIGo_to_CellEdit;
            WinButton uIOKButton = this.UIPossibleDatalossWindow.UICancelWindow.UIOKButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(27, 28));

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetAppWindow = ApplicationUnderTest.Launch(this.Test_showed_an_Error_in_regexParams.UISpreadsheetAppWindowExePath, this.Test_showed_an_Error_in_regexParams.UISpreadsheetAppWindowAlternateExePath);

            // Type 'b3' in 'Go_to_Cell' text box
            uIGo_to_CellEdit.Text = this.Test_showed_an_Error_in_regexParams.UIGo_to_CellEditText;

            // Type '{Enter}' in 'Go_to_Cell' text box
            Keyboard.SendKeys(uIGo_to_CellEdit, this.Test_showed_an_Error_in_regexParams.UIGo_to_CellEditSendKeys, ModifierKeys.None);

            // Click 'Go_to_Cell' text box
            Mouse.Click(uIGo_to_CellEdit, new Point(24, 5));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(23, 15));
        }
        
        #region Properties
        public virtual OpenSingleAppParams OpenSingleAppParams
        {
            get
            {
                if ((this.mOpenSingleAppParams == null))
                {
                    this.mOpenSingleAppParams = new OpenSingleAppParams();
                }
                return this.mOpenSingleAppParams;
            }
        }
        
        public virtual Correct_Initial_contentExpectedValues Correct_Initial_contentExpectedValues
        {
            get
            {
                if ((this.mCorrect_Initial_contentExpectedValues == null))
                {
                    this.mCorrect_Initial_contentExpectedValues = new Correct_Initial_contentExpectedValues();
                }
                return this.mCorrect_Initial_contentExpectedValues;
            }
        }
        
        public virtual TypingIntoTextBoxParams TypingIntoTextBoxParams
        {
            get
            {
                if ((this.mTypingIntoTextBoxParams == null))
                {
                    this.mTypingIntoTextBoxParams = new TypingIntoTextBoxParams();
                }
                return this.mTypingIntoTextBoxParams;
            }
        }
        
        public virtual Correct_Alteration1ExpectedValues Correct_Alteration1ExpectedValues
        {
            get
            {
                if ((this.mCorrect_Alteration1ExpectedValues == null))
                {
                    this.mCorrect_Alteration1ExpectedValues = new Correct_Alteration1ExpectedValues();
                }
                return this.mCorrect_Alteration1ExpectedValues;
            }
        }
        
        public virtual Second_App_ItializedExpectedValues Second_App_ItializedExpectedValues
        {
            get
            {
                if ((this.mSecond_App_ItializedExpectedValues == null))
                {
                    this.mSecond_App_ItializedExpectedValues = new Second_App_ItializedExpectedValues();
                }
                return this.mSecond_App_ItializedExpectedValues;
            }
        }
        
        public virtual Overwrite_Attempt_OkParams Overwrite_Attempt_OkParams
        {
            get
            {
                if ((this.mOverwrite_Attempt_OkParams == null))
                {
                    this.mOverwrite_Attempt_OkParams = new Overwrite_Attempt_OkParams();
                }
                return this.mOverwrite_Attempt_OkParams;
            }
        }
        
        public virtual Loading_the_demo_xmlParams Loading_the_demo_xmlParams
        {
            get
            {
                if ((this.mLoading_the_demo_xmlParams == null))
                {
                    this.mLoading_the_demo_xmlParams = new Loading_the_demo_xmlParams();
                }
                return this.mLoading_the_demo_xmlParams;
            }
        }
        
        public virtual Open_Demo_XmlParams Open_Demo_XmlParams
        {
            get
            {
                if ((this.mOpen_Demo_XmlParams == null))
                {
                    this.mOpen_Demo_XmlParams = new Open_Demo_XmlParams();
                }
                return this.mOpen_Demo_XmlParams;
            }
        }
        
        public virtual Must_press_enterParams Must_press_enterParams
        {
            get
            {
                if ((this.mMust_press_enterParams == null))
                {
                    this.mMust_press_enterParams = new Must_press_enterParams();
                }
                return this.mMust_press_enterParams;
            }
        }
        
        public virtual Dependencies_workParams Dependencies_workParams
        {
            get
            {
                if ((this.mDependencies_workParams == null))
                {
                    this.mDependencies_workParams = new Dependencies_workParams();
                }
                return this.mDependencies_workParams;
            }
        }
        
        public virtual Equation_PerseveredExpectedValues Equation_PerseveredExpectedValues
        {
            get
            {
                if ((this.mEquation_PerseveredExpectedValues == null))
                {
                    this.mEquation_PerseveredExpectedValues = new Equation_PerseveredExpectedValues();
                }
                return this.mEquation_PerseveredExpectedValues;
            }
        }
        
        public virtual Test_showed_an_Error_in_regexParams Test_showed_an_Error_in_regexParams
        {
            get
            {
                if ((this.mTest_showed_an_Error_in_regexParams == null))
                {
                    this.mTest_showed_an_Error_in_regexParams = new Test_showed_an_Error_in_regexParams();
                }
                return this.mTest_showed_an_Error_in_regexParams;
            }
        }
        
        public UISpreadsheetAppWindow UISpreadsheetAppWindow
        {
            get
            {
                if ((this.mUISpreadsheetAppWindow == null))
                {
                    this.mUISpreadsheetAppWindow = new UISpreadsheetAppWindow();
                }
                return this.mUISpreadsheetAppWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UISpreadsheetAppWindow1 UISpreadsheetAppWindow1
        {
            get
            {
                if ((this.mUISpreadsheetAppWindow1 == null))
                {
                    this.mUISpreadsheetAppWindow1 = new UISpreadsheetAppWindow1();
                }
                return this.mUISpreadsheetAppWindow1;
            }
        }
        
        public UISpreadsheetAppWindow2 UISpreadsheetAppWindow2
        {
            get
            {
                if ((this.mUISpreadsheetAppWindow2 == null))
                {
                    this.mUISpreadsheetAppWindow2 = new UISpreadsheetAppWindow2();
                }
                return this.mUISpreadsheetAppWindow2;
            }
        }
        
        public UISpreadsheetAppWindow3 UISpreadsheetAppWindow3
        {
            get
            {
                if ((this.mUISpreadsheetAppWindow3 == null))
                {
                    this.mUISpreadsheetAppWindow3 = new UISpreadsheetAppWindow3();
                }
                return this.mUISpreadsheetAppWindow3;
            }
        }
        
        public UIPossibleDatalossWindow UIPossibleDatalossWindow
        {
            get
            {
                if ((this.mUIPossibleDatalossWindow == null))
                {
                    this.mUIPossibleDatalossWindow = new UIPossibleDatalossWindow();
                }
                return this.mUIPossibleDatalossWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenSingleAppParams mOpenSingleAppParams;
        
        private Correct_Initial_contentExpectedValues mCorrect_Initial_contentExpectedValues;
        
        private TypingIntoTextBoxParams mTypingIntoTextBoxParams;
        
        private Correct_Alteration1ExpectedValues mCorrect_Alteration1ExpectedValues;
        
        private Second_App_ItializedExpectedValues mSecond_App_ItializedExpectedValues;
        
        private Overwrite_Attempt_OkParams mOverwrite_Attempt_OkParams;
        
        private Loading_the_demo_xmlParams mLoading_the_demo_xmlParams;
        
        private Open_Demo_XmlParams mOpen_Demo_XmlParams;
        
        private Must_press_enterParams mMust_press_enterParams;
        
        private Dependencies_workParams mDependencies_workParams;
        
        private Equation_PerseveredExpectedValues mEquation_PerseveredExpectedValues;
        
        private Test_showed_an_Error_in_regexParams mTest_showed_an_Error_in_regexParams;
        
        private UISpreadsheetAppWindow mUISpreadsheetAppWindow;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UISpreadsheetAppWindow1 mUISpreadsheetAppWindow1;
        
        private UISpreadsheetAppWindow2 mUISpreadsheetAppWindow2;
        
        private UISpreadsheetAppWindow3 mUISpreadsheetAppWindow3;
        
        private UIPossibleDatalossWindow mUIPossibleDatalossWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSingleApp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenSingleAppParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\Jonathan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Correct_Initial_content'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Correct_Initial_contentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
        /// </summary>
        public string UICell_NameEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Value' text box equals ''
        /// </summary>
        public string UICell_ValueEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Contents' text box equals ''
        /// </summary>
        public string UICell_ContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypingIntoTextBox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class TypingIntoTextBoxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'hello' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditText = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Correct_Alteration1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Correct_Alteration1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
        /// </summary>
        public string UICell_NameEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Value' text box equals 'hello'
        /// </summary>
        public string UICell_ValueEditText = "hello";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Contents' text box equals 'hello'
        /// </summary>
        public string UICell_ContentsEditText = "hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Second_App_Itialized'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Second_App_ItializedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Name' text box equals 'A1'
        /// </summary>
        public string UICell_NameEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Value' text box equals ''
        /// </summary>
        public string UICell_ValueEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Contents' text box equals ''
        /// </summary>
        public string UICell_ContentsEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Overwrite_Attempt_Ok'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Overwrite_Attempt_OkParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'hello_record' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "hello_record";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Loading_the_demo_xml'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Loading_the_demo_xmlParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Desktop' -> 'This PC' -> 'Documents' tree item
        /// </summary>
        public bool UIDocumentsTreeItemExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Demo_Xml'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Open_Demo_XmlParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowExePath = "C:\\Users\\Jonathan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Must_press_enter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Must_press_enterParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowExePath = "C:\\Users\\Jonathan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=b1+1' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditText = "=b1+1";
        
        /// <summary>
        /// Type '1' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditText1 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies_work'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Dependencies_workParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowExePath = "C:\\Users\\Jonathan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=B1+1' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditText = "=B1+1";
        
        /// <summary>
        /// Type '1' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditText1 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents' text box
        /// </summary>
        public string UICell_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Equation_Persevered'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Equation_PerseveredExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Contents' text box equals '=B1+1'
        /// </summary>
        public string UICell_ContentsEditText = "=B1+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_showed_an_Error_in_regex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Test_showed_an_Error_in_regexParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowExePath = "C:\\Users\\Jonathan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetAppWindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'b3' in 'Go_to_Cell' text box
        /// </summary>
        public string UIGo_to_CellEditText = "b3";
        
        /// <summary>
        /// Type '{Enter}' in 'Go_to_Cell' text box
        /// </summary>
        public string UIGo_to_CellEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppWindow : WinWindow
    {
        
        public UISpreadsheetAppWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet App";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICell_ValueWindow UICell_ValueWindow
        {
            get
            {
                if ((this.mUICell_ValueWindow == null))
                {
                    this.mUICell_ValueWindow = new UICell_ValueWindow(this);
                }
                return this.mUICell_ValueWindow;
            }
        }
        
        public UICell_ContentsWindow UICell_ContentsWindow
        {
            get
            {
                if ((this.mUICell_ContentsWindow == null))
                {
                    this.mUICell_ContentsWindow = new UICell_ContentsWindow(this);
                }
                return this.mUICell_ContentsWindow;
            }
        }
        
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIGo_to_CellWindow UIGo_to_CellWindow
        {
            get
            {
                if ((this.mUIGo_to_CellWindow == null))
                {
                    this.mUIGo_to_CellWindow = new UIGo_to_CellWindow(this);
                }
                return this.mUIGo_to_CellWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window mUIA1Window;
        
        private UICell_ValueWindow mUICell_ValueWindow;
        
        private UICell_ContentsWindow mUICell_ContentsWindow;
        
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIGo_to_CellWindow mUIGo_to_CellWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Name";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_NameEdit
        {
            get
            {
                if ((this.mUICell_NameEdit == null))
                {
                    this.mUICell_NameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_NameEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_NameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_NameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICell_ValueWindow : WinWindow
    {
        
        public UICell_ValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Value";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_ValueEdit
        {
            get
            {
                if ((this.mUICell_ValueEdit == null))
                {
                    this.mUICell_ValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_ValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell_Name";
                    this.mUICell_ValueEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_ValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_ValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICell_ContentsWindow : WinWindow
    {
        
        public UICell_ContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Contents";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_ContentsEdit
        {
            get
            {
                if ((this.mUICell_ContentsEdit == null))
                {
                    this.mUICell_ContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_ContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell_Value";
                    this.mUICell_ContentsEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_ContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_ContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar : WinMenuBar
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "file";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinClient UIGUICellsClient
        {
            get
            {
                if ((this.mUIGUICellsClient == null))
                {
                    this.mUIGUICellsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIGUICellsClient.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUIGUICellsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIGUICellsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGo_to_CellWindow : WinWindow
    {
        
        public UIGo_to_CellWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Go_to_Cell";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UIGo_to_CellEdit
        {
            get
            {
                if ((this.mUIGo_to_CellEdit == null))
                {
                    this.mUIGo_to_CellEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIGo_to_CellEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Go to Cell";
                    this.mUIGo_to_CellEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUIGo_to_CellEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIGo_to_CellEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppWindow1 : WinWindow
    {
        
        public UISpreadsheetAppWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet App";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICell_ValueWindow1 UICell_ValueWindow
        {
            get
            {
                if ((this.mUICell_ValueWindow == null))
                {
                    this.mUICell_ValueWindow = new UICell_ValueWindow1(this);
                }
                return this.mUICell_ValueWindow;
            }
        }
        
        public UICell_ContentsWindow1 UICell_ContentsWindow
        {
            get
            {
                if ((this.mUICell_ContentsWindow == null))
                {
                    this.mUICell_ContentsWindow = new UICell_ContentsWindow1(this);
                }
                return this.mUICell_ContentsWindow;
            }
        }
        
        public UISpreadsheetAppTitleBar UISpreadsheetAppTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetAppTitleBar == null))
                {
                    this.mUISpreadsheetAppTitleBar = new UISpreadsheetAppTitleBar(this);
                }
                return this.mUISpreadsheetAppTitleBar;
            }
        }
        
        public UIMenuBarMenuBar1 UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar1(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window1 mUIA1Window;
        
        private UICell_ValueWindow1 mUICell_ValueWindow;
        
        private UICell_ContentsWindow1 mUICell_ContentsWindow;
        
        private UISpreadsheetAppTitleBar mUISpreadsheetAppTitleBar;
        
        private UIMenuBarMenuBar1 mUIMenuBarMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Name";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_NameEdit
        {
            get
            {
                if ((this.mUICell_NameEdit == null))
                {
                    this.mUICell_NameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_NameEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_NameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_NameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICell_ValueWindow1 : WinWindow
    {
        
        public UICell_ValueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Value";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_ValueEdit
        {
            get
            {
                if ((this.mUICell_ValueEdit == null))
                {
                    this.mUICell_ValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_ValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell_Name";
                    this.mUICell_ValueEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_ValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_ValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICell_ContentsWindow1 : WinWindow
    {
        
        public UICell_ContentsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Contents";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_ContentsEdit
        {
            get
            {
                if ((this.mUICell_ContentsEdit == null))
                {
                    this.mUICell_ContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_ContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell_Value";
                    this.mUICell_ContentsEdit.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICell_ContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_ContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppTitleBar : WinTitleBar
    {
        
        public UISpreadsheetAppTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar1 : WinMenuBar
    {
        
        public UIMenuBarMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "file";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppWindow2 : WinWindow
    {
        
        public UISpreadsheetAppWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet App";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar2 UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar2(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UISpreadsheetAppTitleBar1 UISpreadsheetAppTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetAppTitleBar == null))
                {
                    this.mUISpreadsheetAppTitleBar = new UISpreadsheetAppTitleBar1(this);
                }
                return this.mUISpreadsheetAppTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar2 mUIMenuBarMenuBar;
        
        private UISpreadsheetAppTitleBar1 mUISpreadsheetAppTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuBarMenuBar2 : WinMenuBar
    {
        
        public UIMenuBarMenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "file";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetAppTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppWindow3 : WinWindow
    {
        
        public UISpreadsheetAppWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet App";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "4";
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetAppTitleBar2 UISpreadsheetAppTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetAppTitleBar == null))
                {
                    this.mUISpreadsheetAppTitleBar = new UISpreadsheetAppTitleBar2(this);
                }
                return this.mUISpreadsheetAppTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetAppTitleBar2 mUISpreadsheetAppTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetAppTitleBar2 : WinTitleBar
    {
        
        public UISpreadsheetAppTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet App");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet App");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPossibleDatalossWindow : WinWindow
    {
        
        public UIPossibleDatalossWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Possible Dataloss";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Possible Dataloss");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Possible Dataloss");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Possible Dataloss");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Possible Dataloss");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Possible Dataloss");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Possible Dataloss");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIThisPCTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new UIThisPCTreeItem(this);
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIThisPCTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIThisPCTreeItem : WinTreeItem
    {
        
        public UIThisPCTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDocumentsTreeItem
        {
            get
            {
                if ((this.mUIDocumentsTreeItem == null))
                {
                    this.mUIDocumentsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDocumentsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Documents";
                    this.mUIDocumentsTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDocumentsTreeItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIDocumentsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDocumentsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIVisualStudio2013ListItem UIVisualStudio2013ListItem
        {
            get
            {
                if ((this.mUIVisualStudio2013ListItem == null))
                {
                    this.mUIVisualStudio2013ListItem = new UIVisualStudio2013ListItem(this);
                }
                return this.mUIVisualStudio2013ListItem;
            }
        }
        
        public UIDemosprdListItem UIDemosprdListItem
        {
            get
            {
                if ((this.mUIDemosprdListItem == null))
                {
                    this.mUIDemosprdListItem = new UIDemosprdListItem(this);
                }
                return this.mUIDemosprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualStudio2013ListItem mUIVisualStudio2013ListItem;
        
        private UIDemosprdListItem mUIDemosprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIVisualStudio2013ListItem : WinListItem
    {
        
        public UIVisualStudio2013ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Visual Studio 2013";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDemosprdListItem : WinListItem
    {
        
        public UIDemosprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIProjectsListItem UIProjectsListItem
        {
            get
            {
                if ((this.mUIProjectsListItem == null))
                {
                    this.mUIProjectsListItem = new UIProjectsListItem(this);
                }
                return this.mUIProjectsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjectsListItem mUIProjectsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProjectsListItem : WinListItem
    {
        
        public UIProjectsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Projects";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIPS6SkeletonListItem UIPS6SkeletonListItem
        {
            get
            {
                if ((this.mUIPS6SkeletonListItem == null))
                {
                    this.mUIPS6SkeletonListItem = new UIPS6SkeletonListItem(this);
                }
                return this.mUIPS6SkeletonListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6SkeletonListItem mUIPS6SkeletonListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPS6SkeletonListItem : WinListItem
    {
        
        public UIPS6SkeletonListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS6Skeleton";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemosprdListItem1 UIDemosprdListItem
        {
            get
            {
                if ((this.mUIDemosprdListItem == null))
                {
                    this.mUIDemosprdListItem = new UIDemosprdListItem1(this);
                }
                return this.mUIDemosprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemosprdListItem1 mUIDemosprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDemosprdListItem1 : WinListItem
    {
        
        public UIDemosprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
}
