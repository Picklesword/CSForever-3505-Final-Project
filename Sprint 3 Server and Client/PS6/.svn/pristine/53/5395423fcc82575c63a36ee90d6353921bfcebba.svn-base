using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SS;
using System.Text.RegularExpressions;


namespace SpreadsheetGUI
{
    public partial class Form1 : Form
    {
        private Spreadsheet actual_spreadsheet;
        private bool cancel_from_overwrite;
        const string form_error = @"(FormulaError)";
        private string file_name;
        public Form1()
        {
            InitializeComponent();
            // this.FormClosing += new FormClosingEventHandler(form_close_check); 
            spreadsheetPanel1.SelectionChanged += displaySelection;
            spreadsheetPanel1.SetSelection(0, 0);
            this.Resize += new EventHandler(redraw);
            saveToolStripMenuItem.Click += new EventHandler(saveToolStripMenuItem_Click);
            loadToolStripMenuItem.Click += new EventHandler(openToolStripMenuItem_Click);
            actual_spreadsheet = new Spreadsheet(x => true, x => x.ToUpper(), "ps6");
            Cell_Contents.KeyDown += new KeyEventHandler(Edit_Cell_Contents);
            Cell_Contents.Text = "";
            Cell_Name.Text = "A1";
            Cell_Value.Text = "";


        }

        private void displaySelection(SpreadsheetPanel ss)
        {
            int row, col;
            String value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
            Cell_Name.Text = ((char)('A' + col)).ToString() + ((char)('1' + row)).ToString();
            Cell_Value.Text = actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString();     // add in error detection for formula error exception
            Cell_Contents.Text = actual_spreadsheet.GetCellContents(Cell_Name.Text).ToString();
        }

        private void redraw(object sender, EventArgs e)
        {
            spreadsheetPanel1.Invalidate();
        }

        private void Edit_Cell_Contents(object sender, KeyEventArgs e)
        {
            int row, col;

            if (Cell_Contents.Focused == true && e.KeyCode == Keys.Return)
            {
                Tuple<int, int> cell_adress;
                IEnumerable<string> updates = null;
                try
                {
                    updates = actual_spreadsheet.SetContentsOfCell(Cell_Name.Text, Cell_Contents.Text);

                }
                catch
                {
                    statusStrip1.Text = "Error in Formula";
                    spreadsheetPanel1.GetSelection(out col, out row);
                    spreadsheetPanel1.SetValue(col, row, "");
                    return;
                }
                statusStrip1.Text = "Status";
                spreadsheetPanel1.GetSelection(out col, out row);
                if (Regex.IsMatch(actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString(), form_error))
                {
                    spreadsheetPanel1.SetValue(col, row, "");

                }
                else
                {
                    spreadsheetPanel1.SetValue(col, row, actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString());
                }


                foreach (string s in updates)
                {
                    cell_adress = Reverse_Cell_Name(s);
                    if (Regex.IsMatch(actual_spreadsheet.GetCellValue(s).ToString(), form_error))
                    {
                        spreadsheetPanel1.SetValue(cell_adress.Item1, cell_adress.Item2, "");

                    }
                    else
                    {
                        spreadsheetPanel1.SetValue(cell_adress.Item1, cell_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString());
                    }
                    //spreadsheetPanel1.SetValue(cell_adress.Item1, cell_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString()); 
                }
                displaySelection(spreadsheetPanel1);


            }
        }

        private Tuple<int, int> Reverse_Cell_Name(string s)
        {
            int col, row, counter, tempsum;
            counter = 1;
            tempsum = 0;
            col = s[0] - 'A';

            while (counter < s.Length)
            {
                tempsum = s[counter] - '1';
                counter++;
            }
            row = tempsum;
            return new Tuple<int, int>(col, row);
        }


        private void saveToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            // SaveFileDialog savefiledialog = new SaveFileDialog();
            saveFileDialog1.FileOk += new CancelEventHandler(saveFileDialog1_FileOk);
            saveFileDialog1.Filter = "Spreadsheet File (*.sprd)|*.sprd|All Files (*.*)|*.*";
            saveFileDialog1.Disposed += new EventHandler(saveFileDialog1_FileCancel);
            saveFileDialog1.ShowDialog();
        }

        private void openToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            if (actual_spreadsheet.Changed && !possible_overide(openFileDialog1))
            {
                cancel_from_overwrite = true;
                return;
            }
            openFileDialog1.FileOk += new CancelEventHandler(opendFileDialog1_FileOk);
            openFileDialog1.Filter = "Spreadsheet File (*.sprd)|*.sprd|All Files (*.*)|*.*";
            openFileDialog1.ShowDialog();
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            string spread_ext = @"(.sprd)$";
            string temp_name = saveFileDialog1.FileName;
            if (saveFileDialog1.FilterIndex == 0 && !Regex.IsMatch(temp_name, spread_ext))
            {
                temp_name = temp_name + ".sprd";
                //saveFileDialog1.Reset(); 
            }
            try
            {
                actual_spreadsheet.Save(temp_name);
            }
            catch
            {
                string message = "Could not save file";
                string caption = "Save failed";
                MessageBoxButtons button = MessageBoxButtons.OK;
                DialogResult error_mes = MessageBox.Show(message, caption, button);
            }

        }

        private void saveFileDialog1_FileCancel(object sender, EventArgs e)
        {
            cancel_from_overwrite = false;
        }

        private void opendFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            IEnumerable<string> temp_iem;
            Tuple<int, int> temp_address;
            IEnumerable<string> old_vars;
            old_vars = actual_spreadsheet.GetNamesOfAllNonemptyCells();
            try
            {
                actual_spreadsheet = new Spreadsheet(openFileDialog1.FileName, x => true, x => x.ToUpper(), "ps6");
            }
            catch
            {
                string message = "Could not open file";
                string caption = "Open Failed";
                MessageBoxButtons button = MessageBoxButtons.OK;
                DialogResult error_mes = MessageBox.Show(message, caption, button);
                return;
            }
            temp_iem = actual_spreadsheet.GetNamesOfAllNonemptyCells();
            foreach (string s in old_vars)
            {
                temp_address = Reverse_Cell_Name(s);
                spreadsheetPanel1.SetValue(temp_address.Item1, temp_address.Item2, "");
            }
            foreach (string s in temp_iem)
            {
                temp_address = Reverse_Cell_Name(s);
                if (Regex.IsMatch(actual_spreadsheet.GetCellValue(s).ToString(), form_error))
                {
                    spreadsheetPanel1.SetValue(temp_address.Item1, temp_address.Item2, "");

                }
                else
                {
                    spreadsheetPanel1.SetValue(temp_address.Item1, temp_address.Item2, actual_spreadsheet.GetCellValue(s).ToString());
                }
                //spreadsheetPanel1.SetValue(temp_adress.Item1, temp_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString()); 
            }

            spreadsheetPanel1.Invalidate();
            spreadsheetPanel1.SetSelection(0, 0);
            Cell_Name.Text = "A1";
            Cell_Contents.Text = actual_spreadsheet.GetCellContents("A1").ToString();
            Cell_Value.Text = actual_spreadsheet.GetCellValue("A1").ToString();
        }

        private bool possible_overide(object sender)
        {
            string message = "Your work has not been saved and will be lost. \r\n Would you like to save?";
            string caption = "Possible Override";
            MessageBoxButtons button = MessageBoxButtons.YesNoCancel;
            DialogResult overwrite_mes = MessageBox.Show(message, caption, button);
            if (overwrite_mes == DialogResult.Yes)
            {
                //if(sender.GetType() == typeof(OpenFileDialog))
                //{
                //    openFileDialog1
                //}
                saveToolStripMenuItem_Click(saveToolStripMenuItem, new EventArgs());
                return cancel_from_overwrite;
            }
            else if (overwrite_mes == DialogResult.No)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SpreadsheetGUIApplicationContext.getSpreadAppContext().RunInstance(new Form1());

        }

        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (actual_spreadsheet.Changed && !possible_overide(openFileDialog1))
            {
                cancel_from_overwrite = true;
                return;
            }
            Close(); 
        }
    }
}
