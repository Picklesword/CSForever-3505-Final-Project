<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
            <summary>
            A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
            (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
            (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
            set, and the element is already in the set, the set remains unchanged.)
            
            This is achieved using a dictionary storing hashsests. A key is generated using si or ti 
            and the word dependents or dependees. It is used to acess a hashset containting the 
            dependents or dependees. 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.omni_set">
            <summary>
            This dictionary will contain all the sets of dependent 
            and dependee sets. So it can be thought of the as the 
            set of all order pairs. 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.pair_count">
            <summary>
            This counter will be used to keep track of the amount
            of order pairs in the dictionary 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.dependees">
            <summary>
            This string will be concated with another paramater  
            to provide a key to acess the set of dependees 
            for the paramater 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.dependents">
            <summary>
            This string will be concatenated with another paramater  
            to provide a key to acess the set of dependents 
            for the paramater
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.temp_name">
            <summary>
            This string will store the concatenated
            string used as the key 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.temp_set">
            <summary>
            This Hashset will be used to hold a 
            copy of the Hashset being modfied 
            by adding/removing dependets and 
            dependees. It will be modified 
            and replace the orginal in the 
            dictionary. 
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            Using an empty dictionary. 
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            <para> string s</para>
            Reports whether dependents(s) is non-empty.
            Checks to see if Hashset exists in Dictionary. 
            <para> returns bool </para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            <para> string s </para>
            Reports whether dependees(s) is non-empty.
            Checks to see if Hashset exists in Dictionary. 
            <para> returns bool </para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            <para> string s</para>
            Enumerates dependents(s).
            <para> Returns IEnumerable </para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            <para> string s </para>
            Enumerates dependees(s).
            <para> Returns IEnumberable </para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
            <summary>
            Adds the ordered pair (s,t), if it doesn't exist
            Checks Dictionary for Hashset and adds if it 
            does not exist. If Hashset exists adds if elment 
            is not already conatined. 
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            Checks Dictionary for Hashset. Removes 
            element from set if it exists. 
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para> String S IEnumerable (string) </para>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            <para>Looks up Hashsets for current dependee (s) then looks up 
            the depenets Hashsets of dependees and removes s from Hashsets.
            S hash set of dependets is cleared and new dependcy is added between 
            s and the elments of newDependents </para>
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            <para>Looks up Hashsets for current dependent (s) then looks up 
            the  Hashsets of dependees and removes s from those Hashsets.
            S hash set of dependets is cleared and new dependency is added between 
            s and the elments of newDependees </para>
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            <para> string s </para>
            The size of dependees(s).
            This property is an example of an indexer. 
            If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
             Return the size of dependees("a")
             Acesses the Hashset from the Dictionary
             and looks at houw many elments it contains 
            <para> returns int</para>
            </summary>
        </member>
    </members>
</doc>
