using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SS;
using System.Text.RegularExpressions; 


namespace SpreadsheetGUI
{
    public partial class Form1 : Form
    {
        private Spreadsheet actual_spreadsheet;
        public Form1()
        {
            InitializeComponent();

            spreadsheetPanel1.SelectionChanged += displaySelection;
            spreadsheetPanel1.SetSelection(0, 0);
            saveToolStripMenuItem.Click += new EventHandler(saveToolStripMenuItem_Click); 
            actual_spreadsheet = new Spreadsheet( x => true, x => x.ToUpper(), "ps6" );
            Cell_Contents.KeyDown += new KeyEventHandler(Edit_Cell_Contents); 
            Cell_Contents.Text = "";
            Cell_Name.Text = "A1";
            Cell_Value.Text = ""; 
            
            
        }

        private void displaySelection(SpreadsheetPanel ss)
        {
            int row, col;
            String value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
            Cell_Name.Text = ((char)('A' + col)).ToString() + ((char)('1' + row)).ToString();
            Cell_Value.Text = actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString();     // add in error detection for formula error exception
            Cell_Contents.Text = actual_spreadsheet.GetCellContents(Cell_Name.Text).ToString(); 
        }

        private void Edit_Cell_Contents( object sender, KeyEventArgs e)
        {
            int row, col;
           
            if(Cell_Contents.Focused == true &&  e.KeyCode == Keys.Return)
            {
                Tuple<int, int> cell_adress; 
                IEnumerable<string> updates; 
                updates = actual_spreadsheet.SetContentsOfCell(Cell_Name.Text, Cell_Contents.Text);
                spreadsheetPanel1.GetSelection(out col, out row);
                spreadsheetPanel1.SetValue(col, row, actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString()); 
                foreach(string s in updates)
                {
                    cell_adress = Reverse_Cell_Name(s);
                    spreadsheetPanel1.SetValue(cell_adress.Item1, cell_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString()); 
                }
                displaySelection(spreadsheetPanel1); 
                

            }
        }

        private Tuple<int,int> Reverse_Cell_Name(string s)
        {
            int col, row, counter, tempsum; 
            counter = 1;
            tempsum = 0; 
            col = s[0] - 'A';

            while( counter < s.Length)
            {
                tempsum = s[counter] - '1';
                counter++; 
            }
            row = tempsum; 
            return new Tuple<int, int>(col,row); 
        }


        private void saveToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
           // SaveFileDialog savefiledialog = new SaveFileDialog();
            saveFileDialog1.FileOk += new CancelEventHandler(saveFileDialog1_FileOk); 
            saveFileDialog1.Filter = "Spreadsheet File (*.sprd)|*.sprd|All Files (*.*)|*.*";
            saveFileDialog1.ShowDialog(); 
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            string spread_ext = @"(.sprd)$";
            string temp_name = saveFileDialog1.FileName;
            if (saveFileDialog1.FilterIndex == 0 && !Regex.IsMatch(temp_name, spread_ext))
            {
                temp_name = temp_name + ".sprd";
                //saveFileDialog1.Reset(); 
            }
            try
            {
                actual_spreadsheet.Save(temp_name);
            }
            catch
            {
                string message = "Could not save file";
                string caption = "Save failed";
                MessageBoxButtons button = MessageBoxButtons.OK;
                DialogResult error_mes = MessageBox.Show(message, caption, button);
            }
           
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

    }
}
