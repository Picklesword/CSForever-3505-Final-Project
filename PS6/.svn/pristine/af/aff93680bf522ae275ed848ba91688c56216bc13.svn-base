using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SS;
using System.Text.RegularExpressions;


namespace SpreadsheetGUI
{
    public partial class Form1 : Form
    {
        private Spreadsheet actual_spreadsheet;
        private bool cancel_from_overwrite;
        const string form_error = @"(FormulaError)";
        private string file_name;
        public Form1()
        {
            InitializeComponent();
            this.FormClosing += new FormClosingEventHandler(Form_Close_Check); 
            GUICells.SelectionChanged += displaySelection;
            GUICells.SetSelection(0,0);
            this.Resize += new EventHandler(redraw);
            SaveOnMenu.Click += new EventHandler(saveToolStripMenuItem_Click);
            OpenOnMenu.Click += new EventHandler(openToolStripMenuItem_Click);
            actual_spreadsheet = new Spreadsheet(x => true, x => x.ToUpper(), "ps6");
            Cell_Contents.KeyDown += new KeyEventHandler(Edit_Cell_Contents);
            Cell_Contents.Text = "";
            Cell_Name.Text = "A1";
            Cell_Value.Text = "";
            Go_to_Cell.KeyDown += new KeyEventHandler(GoToCell);



        }

        private void displaySelection(SpreadsheetPanel ss)
        {
            int row, col;
            String value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
            Cell_Name.Text = ((char)('A' + col)).ToString() + (row + 1).ToString();
            Cell_Value.Text = actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString();
            if (actual_spreadsheet.GetCellContents(Cell_Name.Text).GetType() != typeof(Double) &&
                actual_spreadsheet.GetCellContents(Cell_Name.Text).GetType() != typeof(string))
            {
                Cell_Contents.Text = "=" + actual_spreadsheet.GetCellContents(Cell_Name.Text).ToString();
            }
            else
            {
                Cell_Contents.Text = actual_spreadsheet.GetCellContents(Cell_Name.Text).ToString();
            }
        }

        private void redraw(object sender, EventArgs e)
        {
            GUICells.Invalidate();
        }

        private void Edit_Cell_Contents(object sender, KeyEventArgs e)
        {
            int row, col;
            if (Cell_Contents.Focused == true && e.KeyCode == Keys.Return)
            {
                Tuple<int, int> cell_adress;
                IEnumerable<string> updates = null;
                try
                {
                    updates = actual_spreadsheet.SetContentsOfCell(Cell_Name.Text, Cell_Contents.Text);

                }
                catch
                {
                    StatusText.Text = " A Circular Dependency has occured."; 
                    statusStrip1.Invalidate(); 
                    GUICells.GetSelection(out col, out row);
                    GUICells.SetValue(col, row, "");
                    return;
                }
                StatusText.Text = " All Formulas Able to Evaluate";
                GUICells.GetSelection(out col, out row);
                if (Regex.IsMatch(actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString(), form_error))
                {
                    GUICells.SetValue(col, row, "");
                    StatusText.Text = " Not All Formulas Able to Evaluate"; 
                }
                else
                {
                    GUICells.SetValue(col, row, actual_spreadsheet.GetCellValue(Cell_Name.Text).ToString());
                }


                foreach (string s in updates)
                {
                    cell_adress = Reverse_Cell_Name(s);
                    if (Regex.IsMatch(actual_spreadsheet.GetCellValue(s).ToString(), form_error))
                    {
                        GUICells.SetValue(cell_adress.Item1, cell_adress.Item2, "");
                        StatusText.Text = "Not All Formulas Able to Evaluate"; 

                    }
                    else
                    {
                        GUICells.SetValue(cell_adress.Item1, cell_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString());
                    }
                    //spreadsheetPanel1.SetValue(cell_adress.Item1, cell_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString()); 
                }
                 IEnumerable<string> temp_it =actual_spreadsheet.GetNamesOfAllNonemptyCells();
                foreach( string s in temp_it)
                {
                    if (Regex.IsMatch(actual_spreadsheet.GetCellValue(s).ToString(), form_error))
                    {
                        StatusText.Text = "Not All Formulas Able to Evaluate";

                    }
                }
                displaySelection(GUICells);


            }
        }

        private Tuple<int, int> Reverse_Cell_Name(string s)
        {
            int col, row; //counter, tempsum;
            //counter = 1;
            //tempsum = 0;
            row = 0;
            col = s[0] - 'A';
            string letter = s[0].ToString();
            string temp = s.Replace(letter, ""); 
            int add = 0;
            Int32.TryParse(temp, out add);
            
            //while (counter < s.Length)
            //{
            //    int add = 0;
            //    //tempsum = s[counter] - '1';
            //    add = Int32.TryParse(, out add); 
            //    counter++;
            //}
            row = add - 1;
            return new Tuple<int, int>(col, row);
        }


        private void saveToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            // SaveFileDialog savefiledialog = new SaveFileDialog();
            Save.FileName = file_name; 
            Save.FileOk += new CancelEventHandler(saveFileDialog1_FileOk);
            Save.Filter = "Spreadsheet File (*.sprd)|*.sprd|All Files (*.*)|*.*";
            Save.Disposed += new EventHandler(saveFileDialog1_FileCancel);
            Save.ShowDialog();
        }

        private void openToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            Open.FileName = ""; 
            cancel_from_overwrite = false; 
            if (actual_spreadsheet.Changed && !possible_overide(Open))
            {
                cancel_from_overwrite = true;
                return;
            }
            Open.FileOk += new CancelEventHandler(opendFileDialog1_FileOk);
            Open.Filter = "Spreadsheet File (*.sprd)|*.sprd|All Files (*.*)|*.*";
            Open.ShowDialog();
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            string spread_ext = @"(.sprd)$";
            string temp_name = Save.FileName;
            if(temp_name != file_name)
            {
                Save.CheckFileExists = true; 
            }
            Save.CheckFileExists = false; 
            file_name = temp_name; 
            if (Save.FilterIndex == 0 && !Regex.IsMatch(temp_name, spread_ext))
            {
                temp_name = temp_name + ".sprd";
                //saveFileDialog1.Reset(); 
            }
            try
            {
                actual_spreadsheet.Save(temp_name);
                
            }
            catch(Exception execpt)
            {
                file_name = null; 
                //saveFileDialog1.FileName =""; 
                string message = "Could not save file\r\n" +execpt.Message;
                string caption = "Save failed";
                MessageBoxButtons button = MessageBoxButtons.OK;
                DialogResult error_mes = MessageBox.Show(message, caption, button);

            }
            

        }

        private void saveFileDialog1_FileCancel(object sender, EventArgs e)
        {
            cancel_from_overwrite = false;
        }

        private void opendFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            IEnumerable<string> temp_iem;
            Tuple<int, int> temp_address;
            IEnumerable<string> old_vars;
            old_vars = actual_spreadsheet.GetNamesOfAllNonemptyCells();
            try
            {
                actual_spreadsheet = new Spreadsheet(Open.FileName, x => true, x => x.ToUpper(), "ps6");
            }
            catch(Exception except)
            { 
                string message = "Could not open file\r\n" +except.Message;
                string caption = "Open Failed";
                MessageBoxButtons button = MessageBoxButtons.OK;
                DialogResult error_mes = MessageBox.Show(message, caption, button);
                return;
            }
            temp_iem = actual_spreadsheet.GetNamesOfAllNonemptyCells();
            foreach (string s in old_vars)
            {
                temp_address = Reverse_Cell_Name(s);
                GUICells.SetValue(temp_address.Item1, temp_address.Item2, "");
            }
            foreach (string s in temp_iem)
            {
                temp_address = Reverse_Cell_Name(s);
                if (Regex.IsMatch(actual_spreadsheet.GetCellValue(s).ToString(), form_error))
                {
                    GUICells.SetValue(temp_address.Item1, temp_address.Item2, "");

                }
                else
                {
                    GUICells.SetValue(temp_address.Item1, temp_address.Item2, actual_spreadsheet.GetCellValue(s).ToString());
                }
                //spreadsheetPanel1.SetValue(temp_adress.Item1, temp_adress.Item2, actual_spreadsheet.GetCellValue(s).ToString()); 
            }

            GUICells.Invalidate();
            GUICells.SetSelection(0, 0);
            Cell_Name.Text = "A1";
            if(actual_spreadsheet.GetCellContents("A1").GetType() != typeof(double) &&
                actual_spreadsheet.GetCellContents("A1").GetType() != typeof(string))
            {
                Cell_Contents.Text = "=" + actual_spreadsheet.GetCellContents("A1").ToString();
            }else
            {
                Cell_Contents.Text = actual_spreadsheet.GetCellContents("A1").ToString();
            }
            //Cell_Contents.Text = actual_spreadsheet.GetCellContents("A1").ToString();
            Cell_Value.Text = actual_spreadsheet.GetCellValue("A1").ToString();
        }

        private bool possible_overide(object sender)
        {
            string message = "Your work has not been saved and will be lost. \r\n Would you like to save?";
            string caption = "Possible Dataloss";
            MessageBoxButtons button = MessageBoxButtons.YesNoCancel;
            DialogResult overwrite_mes = MessageBox.Show(message, caption, button);
            if (overwrite_mes == DialogResult.Yes)
            {
                //if(sender.GetType() == typeof(OpenFileDialog))
                //{
                //    openFileDialog1
                //}
                saveToolStripMenuItem_Click(SaveOnMenu, new EventArgs());
                return cancel_from_overwrite;
            }
            else if (overwrite_mes == DialogResult.No)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SpreadsheetGUIApplicationContext.getSpreadAppContext().RunInstance(new Form1());

        }

        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //if (actual_spreadsheet.Changed && !possible_overide(openFileDialog1))
            //{
            //    cancel_from_overwrite = true;
            //    return;
            //}
            Close(); 
        }

        private void Form_Close_Check (object sender, FormClosingEventArgs e)
        {
            cancel_from_overwrite = false; 
            if (actual_spreadsheet.Changed && !possible_overide(Open))
            {
                cancel_from_overwrite = true;
                e.Cancel = true; 
                return;
            }
            //Close();
        }

        private void GoToCell(object sender, KeyEventArgs e)
        {
            if (Go_to_Cell.Focused == true && e.KeyCode == Keys.Return)
            {   Tuple<int,int> cell_address;

                 Go_to_Cell.Text = Go_to_Cell.Text.ToUpper(); 
                cell_address = Reverse_Cell_Name(Go_to_Cell.Text);
                
                try
                {

                    string cellnames = @"^[A-Z]\d{2}$";
                    if(!Regex.IsMatch(Go_to_Cell.Text, cellnames))
                    {
                        throw new Exception(); 
                    }
                    GUICells.SetSelection(cell_address.Item1, cell_address.Item2);
                    Cell_Name.Text = Go_to_Cell.Text;
                    if (actual_spreadsheet.GetCellContents(Go_to_Cell.Text).GetType() != typeof(string)
                        && actual_spreadsheet.GetCellContents(Go_to_Cell.Text).GetType() != typeof(Double))
                    {
                        Cell_Contents.Text = "=" + actual_spreadsheet.GetCellContents(Go_to_Cell.Text).ToString();
                    }else
                    {
                        Cell_Contents.Text = actual_spreadsheet.GetCellContents(Go_to_Cell.Text).ToString();
                    }
                    Cell_Value.Text = actual_spreadsheet.GetCellValue(Go_to_Cell.Text).ToString();
                    Go_to_Cell.Text = ""; 
                    
                        
                }
                catch
                {
                    Go_to_Cell.Text = ""; 
                    string message = "Cell entered is not valid on the grid";
                    string caption = "Possible Dataloss";
                    MessageBoxButtons button = MessageBoxButtons.OK;
                    DialogResult non_validCell = MessageBox.Show(message, caption, button);
                }
            }
        }

        private void HelpOnMenu_Click(object sender, EventArgs e)
        {
            string message = "Use the mouse to select cells on the grid.\r\nType in valid cell with lower or capital letters to be able to alter the cells contents.\r\nYou must scroll to the desired cell to view it, so do not click on any other cells before typing in contents after using the GoToCell box.\r\nPress enter while in the GoToCell box or contents box to enter data.\r\nUse the menu tabs to open new spreadsheet, save current spreadsheet, or open another spreadsheet.\r\nThere will be an annoying beep each time enter is pressed in those boxes sorry about that.";
            string caption = "Possible Dataloss";
            MessageBoxButtons button = MessageBoxButtons.OK;
            DialogResult non_validCell = MessageBox.Show(message, caption, button);
        }
    }
}
